name: push

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    tags:
      - v**

env:
  BUF_VERSION: "1.10.0"
  BUF_PROTO_DIR: "proto"
  GO_VERSION: "1.18.1"

jobs:
  # --- prepare stage ---
  # compute shared data
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_DATE: ${{ steps.info.outputs.BUILD_DATE }}
      VERSION: ${{ steps.info.outputs.VERSION }}
      REVISION: ${{ steps.info.outputs.REVISION }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: export build info
        id: info
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\/v/}
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: debug
        run: |
          echo build date: ${{ steps.info.outputs.BUILD_DATE }}
          echo version: ${{ steps.info.outputs.VERSION }}
          echo revision: ${{ steps.info.outputs.REVISION }}


  # --- buf stage ---
  # lint proto files
  buf:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: ${{ env.BUF_VERSION }}
      - name: buf lint
        uses: bufbuild/buf-lint-action@v1
        with:
          input: ${{ env.BUF_PROTO_DIR }}
      - name: buf breaking
        uses: bufbuild/buf-breaking-action@v1
        with:
          input: ${{ env.BUF_PROTO_DIR }}
          against: https://github.com/absurdlab/tigerd.git#branch=main,ref=HEAD~1,subdir=${{ env.BUF_PROTO_DIR }}
      - name: buf push (on tagging only)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: bufbuild/buf-push-action@v1
        with:
          input: ${{ env.BUF_PROTO_DIR }}
          buf_token: ${{ secrets.BUF_TOKEN }}


  # -- go stage ---
  # test and build go executable
  go:
    runs-on: ubuntu-22.04
    needs:
      - buf
      - prepare
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          version: ${{ env.BUF_VERSION }}
          github_token: ${{ secrets.PAT_TOKEN }}
      - name: prepare
        run: |
          buf generate && go mod tidy
      - name: unit tests
        run: |
          go test --tags unit ./...
      - name: integration tests
        run: |
          go test --tags integration ./...
      - name: build
        run: |
          go build -a \
          -ldflags "-X github.com/absurdlab/tigerd/buildinfo.GitHash=${{ needs.prepare.outputs.VERSION }}" \
          -installsuffix cgo \
          -o tigerd .
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: tigerd
          path: tigerd


  # --- image stage ---
  # build and push container image
  image:
    runs-on: ubuntu-22.04
    needs:
      - prepare
      - go
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup buildx
        uses: docker/setup-buildx-action@v2
      - name: download
        uses: actions/download-artifact@v3
        with:
          name: tigerd
      - name: prepare metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/absurdlab/tigerd
          tags: |
            type=raw,value=${{ needs.prepare.outputs.VERSION }}
            type=raw,value=latest
      - name: login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.PAT_TOKEN }}
      - name: build and push image
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile.CI
          build-args: |
            TIGERD_EXEC=tigerd
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
